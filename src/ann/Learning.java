/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ann;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.util.concurrent.ThreadLocalRandom;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 *
 * @author David
 */
public class Learning extends javax.swing.JFrame {

    /**
     * Creates new form Learning
     */
    public Learning() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        comboKategori = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        textHiddenLayer = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        textEpoch = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        textTargetError = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        textTampilIterasi = new javax.swing.JTextField();
        buttonLatih = new javax.swing.JButton();
        progressBarLearning = new javax.swing.JProgressBar();
        jLabel8 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        labelIterasi = new javax.swing.JLabel();
        labelMse = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        textLearningRate = new javax.swing.JTextField();
        buttonReset = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        comboAktivasi = new javax.swing.JComboBox<>();
        jPanel3 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textAreaInput = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        textAreaHidden = new javax.swing.JTextArea();
        jPanel5 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        textAreaMse = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        textAreaZ = new javax.swing.JTextArea();
        jScrollPane5 = new javax.swing.JScrollPane();
        textAreaY = new javax.swing.JTextArea();

        jPanel1.setBackground(new java.awt.Color(0, 171, 169));

        jLabel1.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("PROSES PELATIHAN DATA");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(375, 375, 375)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel1)
                .addContainerGap(30, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(0, 171, 169));

        jSeparator1.setBackground(new java.awt.Color(255, 255, 255));
        jSeparator1.setForeground(new java.awt.Color(255, 255, 255));

        jLabel3.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Kategori Data");

        comboKategori.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Semua Data", "Data Latih", "Data Uji" }));

        jLabel4.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Neuron Hidden");

        jLabel5.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Jumlah Iterasi");

        jLabel6.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Target Eror");

        jLabel7.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Tampil Per Iterasi");

        textTampilIterasi.setText("1");

        buttonLatih.setText("Latih");
        buttonLatih.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonLatihActionPerformed(evt);
            }
        });

        progressBarLearning.setStringPainted(true);

        jLabel8.setFont(new java.awt.Font("Century Gothic", 1, 16)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Pengaturan");

        jLabel11.setFont(new java.awt.Font("Century Gothic", 1, 16)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("Informasi saat ini");

        jSeparator2.setBackground(new java.awt.Color(255, 255, 255));
        jSeparator2.setForeground(new java.awt.Color(255, 255, 255));

        jLabel12.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("Iterasi");

        jLabel13.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("MSE");

        labelIterasi.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        labelIterasi.setForeground(new java.awt.Color(255, 255, 255));
        labelIterasi.setText("0");

        labelMse.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        labelMse.setForeground(new java.awt.Color(255, 255, 255));
        labelMse.setText("0");

        jLabel14.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setText("Learning Rate");

        buttonReset.setText("Reset");
        buttonReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonResetActionPerformed(evt);
            }
        });

        jLabel15.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 255, 255));
        jLabel15.setText("Aktivasi");

        comboAktivasi.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sigmoid Biner", "Sigmoid Bipolar" }));
        comboAktivasi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboAktivasiActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(93, 93, 93)
                .addComponent(jLabel8)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel15)
                                .addGap(60, 60, 60)
                                .addComponent(comboAktivasi, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(textTampilIterasi, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4))
                                .addGap(11, 11, 11)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(textHiddenLayer)
                                    .addComponent(comboKategori, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel12)
                                    .addComponent(jLabel13))
                                .addGap(80, 80, 80)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(labelMse)
                                    .addComponent(labelIterasi)))
                            .addComponent(progressBarLearning, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(58, 58, 58)
                                        .addComponent(jLabel11))
                                    .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                .addComponent(buttonLatih, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buttonReset, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel14)
                                    .addComponent(jLabel6))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(textTargetError)
                                    .addComponent(textLearningRate)
                                    .addComponent(textEpoch))))
                        .addGap(19, 19, 19))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(comboKategori, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(textHiddenLayer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(textEpoch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(textLearningRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(textTargetError, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(textTampilIterasi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(comboAktivasi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonLatih)
                    .addComponent(buttonReset))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progressBarLearning, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(labelIterasi))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(labelMse))
                .addGap(14, 14, 14))
        );

        jPanel3.setBackground(new java.awt.Color(0, 171, 169));

        jLabel9.setFont(new java.awt.Font("Century Gothic", 1, 16)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Input - Hidden Layer");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jLabel9)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9)
                .addContainerGap(13, Short.MAX_VALUE))
        );

        jPanel4.setBackground(new java.awt.Color(0, 171, 169));

        jLabel2.setFont(new java.awt.Font("Century Gothic", 1, 16)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Hidden - Output Layer");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(25, 25, 25))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        textAreaInput.setColumns(20);
        textAreaInput.setRows(5);
        jScrollPane1.setViewportView(textAreaInput);

        textAreaHidden.setColumns(20);
        textAreaHidden.setRows(5);
        jScrollPane2.setViewportView(textAreaHidden);

        jPanel5.setBackground(new java.awt.Color(0, 171, 169));

        jLabel10.setFont(new java.awt.Font("Century Gothic", 1, 16)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Nilai MSE");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel10)
                .addGap(76, 76, 76))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10)
                .addContainerGap(13, Short.MAX_VALUE))
        );

        textAreaMse.setColumns(20);
        textAreaMse.setRows(5);
        jScrollPane3.setViewportView(textAreaMse);

        textAreaZ.setColumns(20);
        textAreaZ.setRows(5);
        jScrollPane4.setViewportView(textAreaZ);

        textAreaY.setColumns(20);
        textAreaY.setRows(5);
        jScrollPane5.setViewportView(textAreaY);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 231, Short.MAX_VALUE)
                    .addComponent(jScrollPane4))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 231, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane5))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 274, Short.MAX_VALUE)
                                    .addComponent(jScrollPane2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane4)
                                    .addComponent(jScrollPane5))))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonLatihActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonLatihActionPerformed
        String aktivasi = (String) comboAktivasi.getSelectedItem();
        
        if ("Sigmoid Biner".equals(aktivasi)) {
            resetData();
            sigmoidBiner();
        } else if ("Sigmoid Bipolar".equals(aktivasi)) {
            resetData();
            sigmoidBipolar();
        }
        
        // resetData();
        // learningData();
    }//GEN-LAST:event_buttonLatihActionPerformed

    private void buttonResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonResetActionPerformed
        resetData();
    }//GEN-LAST:event_buttonResetActionPerformed

    private void comboAktivasiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboAktivasiActionPerformed
        // TO DO Something
    }//GEN-LAST:event_comboAktivasiActionPerformed

    private void sigmoidBiner() {
        // var data learning
        double x[][] = new double[50][50];
        double xNorm[][] = new double[50][50];
        double v[][] = new double[100][100];
        double vb[] = new double[100];
        double w[][] = new double[100][100];
        double wb[] = new double[100];
        double t[] = new double[50];
        
        // initialize
        int n = 0;
        int countRecords;
        
        // var data setting
        double lr = Double.parseDouble(textLearningRate.getText());
        int neuron_hidden = Integer.parseInt(textHiddenLayer.getText());
        int neuron_output = 1;
        int neuron_input = 5;
        int loop = 0;
        int epoch = Integer.parseInt(textEpoch.getText());
        double target_error = Double.parseDouble(textTargetError.getText());
        double last_mse;
        
        String kategori = (String) comboKategori.getSelectedItem();
        DecimalFormat df = new DecimalFormat("#.####");
        int iterasi = Integer.parseInt(textTampilIterasi.getText());
        Helper help = new Helper();
        countRecords = 0;
        
        if ("Semua Data".equals(kategori)) {
            countRecords = help.countRecords();
        } else {
            countRecords = help.countRecords(kategori);
        }
        
        try {
            Statement stm = Connect.getConn().createStatement();
            // ResultSet rsl = stm.executeQuery("select * from tb_data");
            ResultSet rsl;
            if ("Semua Data".equals(kategori)) {
                rsl = stm.executeQuery("select * from datas");
            } else {
                rsl = stm.executeQuery("select * from datas where kategori = '"+kategori+"'");
            }
            
            while (rsl.next()) {
                xNorm[n][0] = rsl.getDouble("t5");
                xNorm[n][1] = rsl.getDouble("t4");
                xNorm[n][2] = rsl.getDouble("t3");
                xNorm[n][3] = rsl.getDouble("t2");
                xNorm[n][4] = rsl.getDouble("t1");
                xNorm[n][5] = rsl.getDouble("target");
                n++;
            }
        
            rsl.close();
            stm.close();
        } catch (SQLException e) {
            System.out.println("Gagal mengambil data\n"+e);
        }
        
        for (int i = 0; i < countRecords; i++) {
            for (int j = 0; j < 6; j++) {
                x[i][j] = ((0.8*(xNorm[i][j]-help.nilaiMin(xNorm, countRecords)))/(help.nilaiMax(xNorm, countRecords)-help.nilaiMin(xNorm, countRecords)))+0.1;
                t[i] = x[i][5];
            }
        }
        
        // Random bobot
        for (int j = 0; j < neuron_hidden; j++) {
            for (int k = 0; k < neuron_input; k++) {
                v[j][k] = ThreadLocalRandom.current().nextDouble(0, 1);
                // System.out.println("Bobot = "+v[j][k]);
            }
            vb[j] = ThreadLocalRandom.current().nextDouble(0, 1);
            // System.out.println("Bias = "+vb[j]);
        }
        
        for (int j = 0; j < neuron_output; j++) {
            for (int k = 0; k < neuron_hidden; k++) {
                w[j][k] = ThreadLocalRandom.current().nextDouble(0, 1);
                // System.out.println("Bobot = "+w[j][k]);
            }
            wb[j] = ThreadLocalRandom.current().nextDouble(0, 1);
            // System.out.println("Bias = "+wb[j]);
        }
        
        /*
        // Random bobot
        for (int j = 0; j < neuron_hidden; j++) {
            for (int k = 0; k < neuron_input; k++) {
                v[j][k] = Math.random();
                System.out.println("Bobot = "+v[j][k]);
            }
            vb[j] = Math.random();
            System.out.println("Bias = "+vb[j]);
        }
        
        for (int j = 0; j < neuron_output; j++) {
            for (int k = 0; k < neuron_hidden; k++) {
                w[j][k] = Math.random();
                System.out.println("Bobot = "+w[j][k]);
            }
            wb[j] = Math.random();
            System.out.println("Bias = "+wb[j]);
        }
        */
        
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        
        do {
            double temp_mse[] = new double[50];
            double mse = 0;
            
            // view step by step
            textAreaMse.update(textAreaMse.getGraphics());
            textAreaInput.update(textAreaInput.getGraphics());
            textAreaHidden.update(textAreaHidden.getGraphics());
            textAreaZ.update(textAreaZ.getGraphics());
            textAreaY.update(textAreaY.getGraphics());
            
            for (int i = 0; i < countRecords; i++) {
                
                // Input layer
                double z[] = new double[10];
                for (int j = 0; j < neuron_hidden; j++) {
                    double z_net[] = new double[10];
                    double temp = 0;
                    for (int k = 0; k < neuron_input; k++) {
                        temp = temp + (x[i][k] * v[k][j]);
                        // System.out.println(i+" "+k+" = "+x[i][k]);
                    }
                    // Hasil z_net + bias
                    z_net[j] = vb[j] + temp;
                    // System.out.println("z_net["+j+"] = "+z_net[j]);

                    // Hasil z dengan aktivasi sigmoid biner
                    z[j] = 1/(1+(Math.exp(-z_net[j])));
                    if ((loop % iterasi) == 0 || (loop == (epoch - 1))) {
                        textAreaZ.append("Nilai z["+j+"] = "+df.format(z[j])+"\n");
                    }
                    // System.out.println("z["+j+"] = "+z[j]);
                }
                if ((loop % iterasi) == 0) {
                    textAreaZ.append("---------------------------------------\n");
                }

                // Output layer
                double y[] = new double[10];
                for (int j = 0; j < neuron_output; j++) {
                    double y_net[] = new double[10];
                    double temp = 0;

                    for (int k = 0; k < neuron_hidden; k++) {
                        temp = temp + (z[k] * w[j][k]);
                    }
                    y_net[j] = wb[j] + temp;
                    y[j] = 1/(1+(Math.exp(-y_net[j])));
                    
                    if ((loop % iterasi) == 0 || (loop == (epoch - 1))) {
                        textAreaY.append("Nilai y = "+df.format(y[j])+"\n");
                    }
                    temp_mse[i] = Math.pow((y[j]-t[i]), 2)/countRecords;
                }
                
                mse = mse + temp_mse[i];

                // Error y dan delta w
                double error_y[] = new double[10];
                double Aw[][] = new double[10][10];
                double Awb[] = new double[10];

                for (int j = 0; j < neuron_output; j++) {
                    // Error y
                    error_y[j] = (t[i] - y[j]) * y[j] * (1 - y[j]);
                    // System.out.println("Error output = "+error_y[j]);

                    for (int k = 0; k < neuron_hidden; k++) {
                        // Delta bobot
                        Aw[j][k] = lr * error_y[j] * z[k];
                        // System.out.println("Aw["+j+"]["+k+"] = "+Aw[j][k]);
                    }
                    // Delta bobot bias
                    Awb[j] = lr * error_y[j];
                    // System.out.println("Awb["+j+"] = "+Awb[j]);
                }

                // Error y_net
                double error_ynet[] = new double[10];
                double error_z[] = new double[10];
                double Av[][] = new double[10][10];
                double Avb[] = new double[10];

                for (int j = 0; j < neuron_hidden; j++) {
                    for (int k = 0; k < neuron_output; k++) {
                        // faktor kesalahan y_net
                        error_ynet[j] = error_y[k] * w[k][j];
                        // System.out.println("Error y_net = "+error_ynet[j]);
                    }
                    // faktor kesalahan z
                    error_z[j] = error_ynet[j] * z[j] * (1 - z[j]);
                    // System.out.println("Error z = "+error_z[j]);

                    for (int k = 0; k < neuron_input; k++) {
                        // Suku perubahan bobot hidden
                        Av[k][j] = lr * error_z[j] * x[i][k];
                    }
                    // Suku perubahan bobot bias
                    Avb[j] = lr * error_z[j];
                    // System.out.println("Av["+j+"] = "+Avb[j]);
                }

                // update bobot output
                for (int j = 0; j < neuron_output; j++) {
                    for (int k = 0; k < neuron_hidden; k++) {
                        // update z
                        w[j][k] = w[j][k] + Aw[j][k];
                        // System.out.println("Bobot output = "+Aw[j][k]+" = "+w[j][k]);
                        if ((loop % iterasi) == 0 || (loop == (epoch - 1))) {
                            textAreaHidden.append("Bobot output["+j+"]["+k+"] = "+df.format(w[j][k])+"\n");
                        }
                        help.writeBobotOutput(w, neuron_output, neuron_hidden);
                    }
                    // update bias
                    wb[j] = wb[j] + Awb[j];
                    // System.out.println("Bias Output = "+Awb[j]+" = "+wb[j]);
                    if ((loop % iterasi) == 0 || (loop == (epoch - 1))) {
                        textAreaHidden.append("Bias Output["+j+"] = "+df.format(wb[j])+"\n---------------------------------------\n");
                    }
                    help.writeBiasOutput(wb, neuron_output);
                }
                
                // update bobot hidden
                for (int j = 0; j < neuron_hidden; j++) {
                    for (int k = 0; k < neuron_input; k++) {
                        // update z
                        v[k][j] = v[k][j] + Av[k][j];
                        // System.out.println("Bobot Hidden = "+Av[k][j]+" = "+v[k][j]);
                        if ((loop % iterasi) == 0 || (loop == (epoch - 1))) {
                            textAreaInput.append("Bobot Hidden["+k+"]["+j+"] = "+df.format(v[k][j])+"\n");
                        }
                        help.writeBobotHidden(v, neuron_hidden, neuron_input);
                    }
                    // update bias
                    vb[j] = vb[j] + Avb[j];
                    // System.out.println("Bias Hidden = "+Avb[j]+" = "+vb[j]);
                    if ((loop % iterasi) == 0 || (loop == (epoch - 1))) {
                        textAreaInput.append("Bias Hidden["+j+"] = "+df.format(vb[j])+"\n----------------------------------------\n");
                    }
                    help.writeBiasHidden(vb, neuron_hidden);
                }
            // Akhir for i
            }
        
        // System.out.println("MSE "+loop+" = "+mse);
        
        if ((loop % iterasi) == 0 || (loop == (epoch - 1))) {
            textAreaMse.append("MSE ["+loop+"] = "+df.format(mse)+"\n");
            textAreaInput.append("Epoch ["+loop+"]\n======================\n");
            textAreaHidden.append("Epoch ["+loop+"]\n======================\n");
            textAreaZ.append("Epoch ["+loop+"]\n======================\n");
            textAreaY.append("-----------------------\nEpoch ["+loop+"]\n======================\n");
        }
        
        last_mse = mse;
        loop++;
        
        // for graph
        dataset.setValue(new Double(mse), "Values", new Integer(loop));
        
        // progress bar
        int learningProgress = (loop/epoch) * 100;
        progressBarLearning.setValue(learningProgress);
        
        } while (loop < epoch && target_error < last_mse);
        System.out.println();
        // System.out.println("Last MSE = "+last_mse);
        // System.out.println("Epoch = "+loop);
        labelIterasi.update(labelIterasi.getGraphics());
        labelIterasi.setText(""+loop);
        labelMse.setText(""+df.format(last_mse));
        
        JFreeChart chart = ChartFactory.createLineChart("Grafik MSE", "Epoch", "Nilai MSE", dataset);
        
        ChartFrame frame = new ChartFrame("Bar Chart", chart);
        frame.setVisible(true);
        frame.setSize(700,550);
        
        // save setting
        double nilai_min = help.nilaiMin(xNorm, countRecords);
        double nilai_max = help.nilaiMax(xNorm, countRecords);
        double data[] = new double[3];
        data[0] = neuron_hidden;
        data[1] = nilai_min;
        data[2] = nilai_max;
        
        help.writeSetting(data);
    }
    
    private void resetData() {
        textAreaInput.setText("");
        textAreaHidden.setText("");
        textAreaZ.setText("");
        textAreaY.setText("");
        textAreaMse.setText("");
//        textHiddenLayer.setText("");
//        textEpoch.setText("");
//        textLearningRate.setText("");
//        textTargetError.setText("");
    }
    
    private void sigmoidBipolar(){
        // var data learning
        double x[][] = new double[50][50];
        double xNorm[][] = new double[50][50];
        double v[][] = new double[100][100];
        double vb[] = new double[100];
        double w[][] = new double[100][100];
        double wb[] = new double[100];
        double t[] = new double[50];
        
        // initialize
        int n = 0;
        int countRecords;
        
        // var data setting
        double lr = Double.parseDouble(textLearningRate.getText());
        int neuron_hidden = Integer.parseInt(textHiddenLayer.getText());
        int neuron_output = 1;
        int neuron_input = 5;
        int loop = 0;
        int epoch = Integer.parseInt(textEpoch.getText());
        double target_error = Double.parseDouble(textTargetError.getText());
        double last_mse;
        
        String kategori = (String) comboKategori.getSelectedItem();
        DecimalFormat df = new DecimalFormat("#.####");
        int iterasi = Integer.parseInt(textTampilIterasi.getText());
        Helper help = new Helper();
        countRecords = 0;
        
        if ("Semua Data".equals(kategori)) {
            countRecords = help.countRecords();
        } else {
            countRecords = help.countRecords(kategori);
        }
        
        try {
            Statement stm = Connect.getConn().createStatement();
            // ResultSet rsl = stm.executeQuery("select * from tb_data");
            ResultSet rsl;
            if ("Semua Data".equals(kategori)) {
                rsl = stm.executeQuery("select * from datas");
            } else {
                rsl = stm.executeQuery("select * from datas where kategori = '"+kategori+"'");
            }
            
            while (rsl.next()) {
                xNorm[n][0] = rsl.getDouble("t5");
                xNorm[n][1] = rsl.getDouble("t4");
                xNorm[n][2] = rsl.getDouble("t3");
                xNorm[n][3] = rsl.getDouble("t2");
                xNorm[n][4] = rsl.getDouble("t1");
                xNorm[n][5] = rsl.getDouble("target");
                n++;
            }
        
            rsl.close();
            stm.close();
        } catch (SQLException e) {
            System.out.println("Gagal mengambil data\n"+e);
        }
        
        for (int i = 0; i < countRecords; i++) {
            for (int j = 0; j < 6; j++) {
                x[i][j] = ((xNorm[i][j]-help.nilaiMin(xNorm, countRecords))*(1-(-1))/(help.nilaiMax(xNorm, countRecords)-help.nilaiMin(xNorm, countRecords)))-1;
                t[i] = x[i][5];
            }
        }
        
        // Random bobot
        for (int j = 0; j < neuron_hidden; j++) {
            for (int k = 0; k < neuron_input; k++) {
                v[j][k] = ThreadLocalRandom.current().nextDouble(-1, 1);
                // System.out.println("Bobot = "+v[j][k]);
            }
            vb[j] = ThreadLocalRandom.current().nextDouble(-1, 1);
            // System.out.println("Bias = "+vb[j]);
        }
        
        for (int j = 0; j < neuron_output; j++) {
            for (int k = 0; k < neuron_hidden; k++) {
                w[j][k] = ThreadLocalRandom.current().nextDouble(-1, 1);
                // System.out.println("Bobot = "+w[j][k]);
            }
            wb[j] = ThreadLocalRandom.current().nextDouble(-1, 1);
            // System.out.println("Bias = "+wb[j]);
        }
        
        /*
        // Random bobot
        for (int j = 0; j < neuron_hidden; j++) {
            for (int k = 0; k < neuron_input; k++) {
                v[j][k] = Math.random();
                System.out.println("Bobot = "+v[j][k]);
            }
            vb[j] = Math.random();
            System.out.println("Bias = "+vb[j]);
        }
        
        for (int j = 0; j < neuron_output; j++) {
            for (int k = 0; k < neuron_hidden; k++) {
                w[j][k] = Math.random();
                System.out.println("Bobot = "+w[j][k]);
            }
            wb[j] = Math.random();
            System.out.println("Bias = "+wb[j]);
        }
        */
        
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        
        do {
            double temp_mse[] = new double[50];
            double mse = 0;
            
            // view step by step
            textAreaMse.update(textAreaMse.getGraphics());
            textAreaInput.update(textAreaInput.getGraphics());
            textAreaHidden.update(textAreaHidden.getGraphics());
            textAreaZ.update(textAreaZ.getGraphics());
            textAreaY.update(textAreaY.getGraphics());
            
            for (int i = 0; i < countRecords; i++) {
                
                // Input layer
                double z[] = new double[10];
                for (int j = 0; j < neuron_hidden; j++) {
                    double z_net[] = new double[10];
                    double temp = 0;
                    for (int k = 0; k < neuron_input; k++) {
                        temp = temp + (x[i][k] * v[k][j]);
                        // System.out.println(i+" "+k+" = "+x[i][k]);
                    }
                    // Hasil z_net + bias
                    z_net[j] = vb[j] + temp;
                    // System.out.println("z_net["+j+"] = "+z_net[j]);

                    // Hasil z dengan aktivasi sigmoid bipolar
                    z[j] = (2/(1+(Math.exp(-z_net[j]))))-1;
                    if ((loop % iterasi) == 0 || (loop == (epoch - 1))) {
                        textAreaZ.append("Nilai z["+j+"] = "+df.format(z[j])+"\n");
                    }
                    // System.out.println("z["+j+"] = "+z[j]);
                }
                if ((loop % iterasi) == 0) {
                    textAreaZ.append("---------------------------------------\n");
                }

                // Output layer
                double y[] = new double[10];
                for (int j = 0; j < neuron_output; j++) {
                    double y_net[] = new double[10];
                    double temp = 0;

                    for (int k = 0; k < neuron_hidden; k++) {
                        temp = temp + (z[k] * w[j][k]);
                    }
                    y_net[j] = wb[j] + temp;
                    y[j] = (2/(1+(Math.exp(-y_net[j]))))-1;
                    
                    if ((loop % iterasi) == 0 || (loop == (epoch - 1))) {
                        textAreaY.append("Nilai y = "+df.format(y[j])+"\n");
                    }
                    temp_mse[i] = Math.pow((y[j]-t[i]), 2)/countRecords;
                }
                
                mse = mse + temp_mse[i];

                // Error y dan delta w
                double error_y[] = new double[10];
                double Aw[][] = new double[10][10];
                double Awb[] = new double[10];

                for (int j = 0; j < neuron_output; j++) {
                    // Error y
                    error_y[j] = (t[i] - y[j]) * ((1 + y[j]) * (1 - y[j])/2);
                    // System.out.println("Error output = "+error_y[j]);

                    for (int k = 0; k < neuron_hidden; k++) {
                        // Delta bobot
                        Aw[j][k] = lr * error_y[j] * z[k];
                        // System.out.println("Aw["+j+"]["+k+"] = "+Aw[j][k]);
                    }
                    // Delta bobot bias
                    Awb[j] = lr * error_y[j];
                    // System.out.println("Awb["+j+"] = "+Awb[j]);
                }

                // Error y_net
                double error_ynet[] = new double[10];
                double error_z[] = new double[10];
                double Av[][] = new double[10][10];
                double Avb[] = new double[10];

                for (int j = 0; j < neuron_hidden; j++) {
                    for (int k = 0; k < neuron_output; k++) {
                        // faktor kesalahan y_net
                        error_ynet[j] = error_y[k] * w[k][j];
                        // System.out.println("Error y_net = "+error_ynet[j]);
                    }
                    // faktor kesalahan z
                    error_z[j] = error_ynet[j] * ((1 + y[j]) * (1 - y[j])/2);
                    // System.out.println("Error z = "+error_z[j]);

                    for (int k = 0; k < neuron_input; k++) {
                        // Suku perubahan bobot hidden
                        Av[k][j] = lr * error_z[j] * x[i][k];
                    }
                    // Suku perubahan bobot bias
                    Avb[j] = lr * error_z[j];
                    // System.out.println("Av["+j+"] = "+Avb[j]);
                }

                // update bobot output
                for (int j = 0; j < neuron_output; j++) {
                    for (int k = 0; k < neuron_hidden; k++) {
                        // update z
                        w[j][k] = w[j][k] + Aw[j][k];
                        // System.out.println("Bobot output = "+Aw[j][k]+" = "+w[j][k]);
                        if ((loop % iterasi) == 0 || (loop == (epoch - 1))) {
                            textAreaHidden.append("Bobot output["+j+"]["+k+"] = "+df.format(w[j][k])+"\n");
                        }
                        help.writeBobotOutput(w, neuron_output, neuron_hidden);
                    }
                    // update bias
                    wb[j] = wb[j] + Awb[j];
                    // System.out.println("Bias Output = "+Awb[j]+" = "+wb[j]);
                    if ((loop % iterasi) == 0 || (loop == (epoch - 1))) {
                        textAreaHidden.append("Bias Output["+j+"] = "+df.format(wb[j])+"\n---------------------------------------\n");
                    }
                    help.writeBiasOutput(wb, neuron_output);
                }
                
                // update bobot hidden
                for (int j = 0; j < neuron_hidden; j++) {
                    for (int k = 0; k < neuron_input; k++) {
                        // update z
                        v[k][j] = v[k][j] + Av[k][j];
                        // System.out.println("Bobot Hidden = "+Av[k][j]+" = "+v[k][j]);
                        if ((loop % iterasi) == 0 || (loop == (epoch - 1))) {
                            textAreaInput.append("Bobot Hidden["+k+"]["+j+"] = "+df.format(v[k][j])+"\n");
                        }
                        help.writeBobotHidden(v, neuron_hidden, neuron_input);
                    }
                    // update bias
                    vb[j] = vb[j] + Avb[j];
                    // System.out.println("Bias Hidden = "+Avb[j]+" = "+vb[j]);
                    if ((loop % iterasi) == 0 || (loop == (epoch - 1))) {
                        textAreaInput.append("Bias Hidden["+j+"] = "+df.format(vb[j])+"\n----------------------------------------\n");
                    }
                    help.writeBiasHidden(vb, neuron_hidden);
                }
            // Akhir for i
            }
        
        // System.out.println("MSE "+loop+" = "+mse);
        
        if ((loop % iterasi) == 0 || (loop == (epoch - 1))) {
            textAreaMse.append("MSE ["+loop+"] = "+df.format(mse)+"\n");
            textAreaInput.append("Epoch ["+loop+"]\n======================\n");
            textAreaHidden.append("Epoch ["+loop+"]\n======================\n");
            textAreaZ.append("Epoch ["+loop+"]\n======================\n");
            textAreaY.append("-----------------------\nEpoch ["+loop+"]\n======================\n");
        }
        
        last_mse = mse;
        loop++;
        
        // for graph
        dataset.setValue(new Double(mse), "Values", new Integer(loop));
        
        // progress bar
        int learningProgress = (loop/epoch) * 100;
        progressBarLearning.setValue(learningProgress);
        
        } while (loop < epoch && target_error < last_mse);
        System.out.println();
        // System.out.println("Last MSE = "+last_mse);
        // System.out.println("Epoch = "+loop);
        labelIterasi.update(labelIterasi.getGraphics());
        labelIterasi.setText(""+loop);
        labelMse.setText(""+df.format(last_mse));
        
        JFreeChart chart = ChartFactory.createLineChart("Grafik MSE", "Epoch", "Nilai MSE", dataset);
        
        ChartFrame frame = new ChartFrame("Bar Chart", chart);
        frame.setVisible(true);
        frame.setSize(700,550);
        
        // save setting
        double nilai_min = help.nilaiMin(xNorm, countRecords);
        double nilai_max = help.nilaiMax(xNorm, countRecords);
        double data[] = new double[3];
        data[0] = neuron_hidden;
        data[1] = nilai_min;
        data[2] = nilai_max;
        
        help.writeSetting(data);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Learning.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Learning.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Learning.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Learning.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Learning().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonLatih;
    private javax.swing.JButton buttonReset;
    private javax.swing.JComboBox<String> comboAktivasi;
    private javax.swing.JComboBox<String> comboKategori;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel labelIterasi;
    private javax.swing.JLabel labelMse;
    private javax.swing.JProgressBar progressBarLearning;
    private javax.swing.JTextArea textAreaHidden;
    private javax.swing.JTextArea textAreaInput;
    private javax.swing.JTextArea textAreaMse;
    private javax.swing.JTextArea textAreaY;
    private javax.swing.JTextArea textAreaZ;
    private javax.swing.JTextField textEpoch;
    private javax.swing.JTextField textHiddenLayer;
    private javax.swing.JTextField textLearningRate;
    private javax.swing.JTextField textTampilIterasi;
    private javax.swing.JTextField textTargetError;
    // End of variables declaration//GEN-END:variables
}
