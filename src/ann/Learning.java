/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ann;

import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.util.concurrent.ThreadLocalRandom;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 *
 * @author David
 */
public class Learning extends javax.swing.JFrame {

    /**
     * Creates new form Learning
     */
    
    private DefaultTableModel tbData;
    
    public Learning() {
        initComponents();
        
        // Table Data
        tbData = new DefaultTableModel();
        
        tableData.setModel(tbData);
        tbData.addColumn("Tahun");
        tbData.addColumn("T-5");
        tbData.addColumn("T-4");
        tbData.addColumn("T-3");
        tbData.addColumn("T-2");
        tbData.addColumn("T-1");
        tbData.addColumn("Target");
        
        getLearningData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel4 = new javax.swing.JLabel();
        textHiddenLayer = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        textEpoch = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        textTargetError = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        textTampilIterasi = new javax.swing.JTextField();
        buttonLatih = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        labelIterasi = new javax.swing.JLabel();
        labelMse = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        textLearningRate = new javax.swing.JTextField();
        buttonReset = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        comboAktivasi = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textAreaHidden = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        textAreaOutput = new javax.swing.JTextArea();
        jPanel5 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        textAreaMse = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        tableData = new javax.swing.JTable();
        jPanel6 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Pelatihan Data");

        jPanel1.setBackground(new java.awt.Color(0, 171, 169));

        jLabel1.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("PELATIHAN DATA");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(399, 399, 399)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel1)
                .addContainerGap(30, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(0, 171, 169));

        jSeparator1.setBackground(new java.awt.Color(255, 255, 255));
        jSeparator1.setForeground(new java.awt.Color(255, 255, 255));

        jLabel4.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Neuron Hidden");

        textHiddenLayer.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textHiddenLayerKeyTyped(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Jumlah Iterasi");

        textEpoch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textEpochKeyTyped(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Batas MSE");

        textTargetError.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textTargetErrorKeyTyped(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Tampil Per Iterasi");

        textTampilIterasi.setText("1");
        textTampilIterasi.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textTampilIterasiKeyTyped(evt);
            }
        });

        buttonLatih.setText("Latih");
        buttonLatih.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonLatihActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Century Gothic", 1, 16)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Pengaturan");

        jLabel11.setFont(new java.awt.Font("Century Gothic", 1, 16)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("Informasi akhir");

        jSeparator2.setBackground(new java.awt.Color(255, 255, 255));
        jSeparator2.setForeground(new java.awt.Color(255, 255, 255));

        jLabel12.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("Iterasi");

        jLabel13.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("MSE");

        labelIterasi.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        labelIterasi.setForeground(new java.awt.Color(255, 255, 255));
        labelIterasi.setText("0");

        labelMse.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        labelMse.setForeground(new java.awt.Color(255, 255, 255));
        labelMse.setText("0");

        jLabel14.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setText("Learning Rate");

        textLearningRate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textLearningRateKeyTyped(evt);
            }
        });

        buttonReset.setText("Reset");
        buttonReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonResetActionPerformed(evt);
            }
        });

        jLabel15.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 255, 255));
        jLabel15.setText("Aktivasi");

        comboAktivasi.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sigmoid Biner", "Sigmoid Bipolar" }));
        comboAktivasi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboAktivasiActionPerformed(evt);
            }
        });

        jButton1.setText("Simpan bobot");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(93, 93, 93)
                .addComponent(jLabel8)
                .addGap(0, 102, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(60, 60, 60)
                                .addComponent(jLabel11))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel12)
                            .addComponent(jLabel13))
                        .addGap(80, 80, 80)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelMse)
                            .addComponent(labelIterasi))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(buttonLatih, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buttonReset, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel5)
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel6)
                                        .addComponent(jLabel14)))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(textHiddenLayer, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(textTargetError)
                                    .addComponent(textLearningRate)
                                    .addComponent(textEpoch, javax.swing.GroupLayout.Alignment.TRAILING)))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                        .addGap(3, 3, 3)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel15)
                                            .addComponent(jLabel7)))
                                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING))
                                .addGap(0, 133, Short.MAX_VALUE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(textTampilIterasi, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(comboAktivasi, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(19, 19, 19))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textHiddenLayer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textEpoch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textLearningRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textTargetError, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textTampilIterasi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboAktivasi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15))
                .addGap(24, 24, 24)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonLatih)
                    .addComponent(buttonReset))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel11)
                .addGap(18, 18, 18)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(labelIterasi))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(labelMse))
                .addGap(22, 22, 22))
        );

        jPanel3.setBackground(new java.awt.Color(0, 171, 169));

        jLabel9.setFont(new java.awt.Font("Century Gothic", 1, 16)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Input - Hidden Layer");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel9)
                .addContainerGap(32, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9)
                .addContainerGap(13, Short.MAX_VALUE))
        );

        jPanel4.setBackground(new java.awt.Color(0, 171, 169));

        jLabel2.setFont(new java.awt.Font("Century Gothic", 1, 16)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Hidden - Output Layer");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(25, 25, 25))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addContainerGap(13, Short.MAX_VALUE))
        );

        textAreaHidden.setEditable(false);
        textAreaHidden.setColumns(20);
        textAreaHidden.setRows(5);
        jScrollPane1.setViewportView(textAreaHidden);

        textAreaOutput.setEditable(false);
        textAreaOutput.setColumns(20);
        textAreaOutput.setRows(5);
        jScrollPane2.setViewportView(textAreaOutput);

        jPanel5.setBackground(new java.awt.Color(0, 171, 169));

        jLabel10.setFont(new java.awt.Font("Century Gothic", 1, 16)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Nilai MSE");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(70, Short.MAX_VALUE)
                .addComponent(jLabel10)
                .addGap(76, 76, 76))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10)
                .addContainerGap(13, Short.MAX_VALUE))
        );

        textAreaMse.setEditable(false);
        textAreaMse.setColumns(20);
        textAreaMse.setRows(5);
        jScrollPane3.setViewportView(textAreaMse);

        tableData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(tableData);

        jPanel6.setBackground(new java.awt.Color(0, 171, 169));

        jLabel3.setFont(new java.awt.Font("Century Gothic", 1, 16)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Data Latih");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(290, 290, 290)
                .addComponent(jLabel3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE)
                                    .addComponent(jScrollPane3)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonLatihActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonLatihActionPerformed
        String aktivasi = (String) comboAktivasi.getSelectedItem();
        
        if (textHiddenLayer.getText().equals("") || textEpoch.getText().equals("") || textLearningRate.getText().equals("") || textTargetError.getText().equals("") || textTampilIterasi.getText().equals("")){
            JOptionPane.showMessageDialog(rootPane, "Data tidak boleh kosong", "Peringatan", JOptionPane.ERROR_MESSAGE);
        } else {
            if ("Sigmoid Biner".equals(aktivasi)) {
                resetData();
                sigmoidBiner();
            } else if ("Sigmoid Bipolar".equals(aktivasi)) {
                resetData();
                sigmoidBipolar();
            }
        }    
    }//GEN-LAST:event_buttonLatihActionPerformed

    private void buttonResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonResetActionPerformed
        resetData();
    }//GEN-LAST:event_buttonResetActionPerformed

    private void comboAktivasiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboAktivasiActionPerformed
        // TO DO Something
    }//GEN-LAST:event_comboAktivasiActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        saveBobot();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void textHiddenLayerKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textHiddenLayerKeyTyped
        char karakter = evt.getKeyChar();
        if (!((Character.isDigit(karakter)||(karakter == KeyEvent.VK_BACK_SPACE) || (karakter == KeyEvent.VK_DELETE)))){
            evt.consume();
        }
    }//GEN-LAST:event_textHiddenLayerKeyTyped

    private void textEpochKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textEpochKeyTyped
        char karakter = evt.getKeyChar();
        if (!((Character.isDigit(karakter)||(karakter == KeyEvent.VK_BACK_SPACE) || (karakter == KeyEvent.VK_DELETE)))){
            evt.consume();
        }
    }//GEN-LAST:event_textEpochKeyTyped

    private void textLearningRateKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textLearningRateKeyTyped
        char karakter = evt.getKeyChar();
        if (!((Character.isDigit(karakter)||(karakter == KeyEvent.VK_PERIOD)||(karakter == KeyEvent.VK_BACK_SPACE) || (karakter == KeyEvent.VK_DELETE)))){
            evt.consume();
        }
    }//GEN-LAST:event_textLearningRateKeyTyped

    private void textTargetErrorKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textTargetErrorKeyTyped
        char karakter = evt.getKeyChar();
        if (!((Character.isDigit(karakter)||(karakter == KeyEvent.VK_PERIOD)||(karakter == KeyEvent.VK_BACK_SPACE) || (karakter == KeyEvent.VK_DELETE)))){
            evt.consume();
        }
    }//GEN-LAST:event_textTargetErrorKeyTyped

    private void textTampilIterasiKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textTampilIterasiKeyTyped
        char karakter = evt.getKeyChar();
        if (!((Character.isDigit(karakter)||(karakter == KeyEvent.VK_BACK_SPACE) || (karakter == KeyEvent.VK_DELETE)))){
            evt.consume();
        }
    }//GEN-LAST:event_textTampilIterasiKeyTyped

    private void sigmoidBiner() {
        // var data learning
        double x[][] = new double[50][50];
        double xNorm[][] = new double[50][50];
        double xTemp[][] = new double[50][50];
        double v[][] = new double[100][100];
        double vb[] = new double[100];
        double w[][] = new double[100][100];
        double wb[] = new double[100];
        double t[] = new double[50];
        
        // Test
        double vTest[][] = {{0.1,0.2,0.3,0.4,0.5},{0.6,0.5,0.4,0.3,0.2}};
        double vbTest[] = {0.6,0.1};
        double wTest[][] = {{0.1,0.2}};
        double wbTest[] = {0.3};
        
        // initialize
        int n = 0;
        int countRecords;
        
        // var data setting
        double lr = Double.parseDouble(textLearningRate.getText());
        int neuronHidden = Integer.parseInt(textHiddenLayer.getText());
        int neuronOutput = 1;
        int neuronInput = 5;
        int loop = 0;
        int epoch = Integer.parseInt(textEpoch.getText());
        double batasError = Double.parseDouble(textTargetError.getText());
        double lastMse;
        
        DecimalFormat df = new DecimalFormat("#.########");
        int iterasi = Integer.parseInt(textTampilIterasi.getText());
        Helper helper = new Helper();
        countRecords = helper.countRecords("Data Latih");
        int countAllRecords = helper.countRecords();
        
        // for minmax
        int count = 0;
        try {
            Statement stm = Connect.getConn().createStatement();
            ResultSet rsl = stm.executeQuery("select * from datas");;
            
            while (rsl.next()) {
                xTemp[count][0] = rsl.getDouble("t5");
                xTemp[count][1] = rsl.getDouble("t4");
                xTemp[count][2] = rsl.getDouble("t3");
                xTemp[count][3] = rsl.getDouble("t2");
                xTemp[count][4] = rsl.getDouble("t1");
                xTemp[count][5] = rsl.getDouble("target");
                count++;
            }
        
            rsl.close();
            stm.close();
        } catch (SQLException e) {
            System.out.println("Gagal mengambil data\n"+e);
        }
        
        double nilaiMin = helper.nilaiMin(xTemp, countAllRecords);
        double nilaiMax = helper.nilaiMax(xTemp, countAllRecords);
        
        try {
            Statement stm = Connect.getConn().createStatement();
            ResultSet rsl = stm.executeQuery("select * from datas where kategori = 'Data Latih'");
            
            while (rsl.next()) {
                xNorm[n][0] = rsl.getDouble("t5");
                xNorm[n][1] = rsl.getDouble("t4");
                xNorm[n][2] = rsl.getDouble("t3");
                xNorm[n][3] = rsl.getDouble("t2");
                xNorm[n][4] = rsl.getDouble("t1");
                xNorm[n][5] = rsl.getDouble("target");
                n++;
            }
        
            rsl.close();
            stm.close();
        } catch (SQLException e) {
            System.out.println("Gagal mengambil data\n"+e);
        }
        
        for (int i = 0; i < countRecords; i++) {
            for (int j = 0; j < 6; j++) {
                x[i][j] =  x[i][j] = ((xNorm[i][j]-nilaiMin)*(1-0)/(nilaiMax-nilaiMin))-0;
                t[i] = x[i][5];
            }
        }
        
        // Bobot statis
        /*
        for (int j = 0; j < neuron_hidden; j++) {
            for (int k = 0; k < neuron_input; k++) {
                // System.out.println("Bobot = ["+j+"]["+k+"]"+vTest[j][k]);
                v[j][k] = vTest[j][k];
            }
            // System.out.println("Bias = ["+j+"]"+vbTest[j]);
            vb[j] = vbTest[j];
        }
        
        for (int j = 0; j < neuron_output; j++) {
            for (int k = 0; k < neuron_hidden; k++) {
                // System.out.println("Bobot = ["+j+"]["+k+"]"+wTest[j][k]);
                w[j][k] = wTest[j][k];
            }
            // System.out.println("Bias = ["+j+"]"+wbTest[j]);
            wb[j] = wbTest[j];
        }
        */
        // Random bobot
        
        for (int j = 0; j < neuronHidden; j++) {
            for (int k = 0; k < neuronInput; k++) {
                v[j][k] = ThreadLocalRandom.current().nextDouble(0, 1);
                // System.out.println("Bobot = ["+j+"]["+k+"]"+v[j][k]);
            }
            vb[j] = ThreadLocalRandom.current().nextDouble(0, 1);
            // System.out.println("Bias = ["+j+"]"+vb[j]);
        }
        
        for (int j = 0; j < neuronOutput; j++) {
            for (int k = 0; k < neuronHidden; k++) {
                w[j][k] = ThreadLocalRandom.current().nextDouble(0, 1);
                // System.out.println("Bobot = ["+j+"]["+k+"]"+w[j][k]);
            }
            wb[j] = ThreadLocalRandom.current().nextDouble(0, 1);
            // System.out.println("Bias = ["+j+"]"+wb[j]);
        }
        
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        
        do {
            double temp_mse[] = new double[50];
            double mse = 0;
            
            // view step by step
            textAreaMse.update(textAreaMse.getGraphics());
            textAreaHidden.update(textAreaHidden.getGraphics());
            textAreaOutput.update(textAreaOutput.getGraphics());
            
            for (int i = 0; i < countRecords; i++) {
                
                // Input layer
                double z[] = new double[10];
                for (int j = 0; j < neuronHidden; j++) {
                    double z_net[] = new double[10];
                    double temp = 0;
                    for (int k = 0; k < neuronInput; k++) {
                        temp = temp + (x[i][k] * v[j][k]);
                        // System.out.println(x[i][k]+" * "+v[j][k]);
                        // System.out.println(i+" "+k+" = "+x[i][k]);
                        // System.out.println("temp = "+temp);
                    }
                    // Hasil z_net + bias
                    z_net[j] = vb[j] + temp;
                    // System.out.println(vb[j]);
                    // System.out.println(temp);
                    // System.out.println("z_net["+j+"] = "+z_net[j]);

                    // Hasil z dengan aktivasi sigmoid biner
                    z[j] = 1/(1+(Math.exp(-z_net[j])));
                    if ((loop % iterasi) == 0 || (loop == (epoch - 1))) {
                        // textAreaZ.append("Nilai z["+j+"] = "+df.format(z[j])+"\n");
                    }
                    // System.out.println("z["+j+"] = "+z[j]);
                }
                if ((loop % iterasi) == 0) {
                    // textAreaZ.append("---------------------------------------\n");
                }

                // Output layer
                double y[] = new double[10];
                for (int j = 0; j < neuronOutput; j++) {
                    double y_net[] = new double[10];
                    double temp = 0;

                    for (int k = 0; k < neuronHidden; k++) {
                        temp = temp + (z[k] * w[j][k]);
                        // System.out.println(z[k]+" * "+w[j][k]);
                        // System.out.println(temp);
                    }
                    y_net[j] = wb[j] + temp;
                    y[j] = 1/(1+(Math.exp(-y_net[j])));
                    
                    // System.out.println(wb[j]);
                    // System.out.println(y_net[j]);
                    // System.out.println(y[j]);
                    if ((loop % iterasi) == 0 || (loop == (epoch - 1))) {
                        // textAreaY.append("Nilai y = "+df.format(y[j])+"\n");
                    }
                    temp_mse[i] = Math.pow((y[j]-t[i]), 2)/countRecords;
                }
                
                mse = mse + temp_mse[i];

                // Error y dan delta w
                double error_y[] = new double[10];
                double Aw[][] = new double[10][10];
                double Awb[] = new double[10];

                for (int j = 0; j < neuronOutput; j++) {
                    // Error y
                    error_y[j] = (t[i] - y[j]) * y[j] * (1 - y[j]);
                    // System.out.println("("+t[i]+" - "+y[j]+") ("+y[j]+") (1 - "+y[j]);
                    // System.out.println("Error output = "+error_y[j]);

                    for (int k = 0; k < neuronHidden; k++) {
                        // Delta bobot
                        Aw[j][k] = lr * error_y[j] * z[k];
                        // System.out.println("Aw["+j+"]["+k+"] = "+Aw[j][k]);
                    }
                    // Delta bobot bias
                    Awb[j] = lr * error_y[j];
                    // System.out.println("Awb["+j+"] = "+Awb[j]);
                }

                // Error y_net
                double error_ynet[] = new double[10];
                double error_z[] = new double[10];
                double Av[][] = new double[10][10];
                double Avb[] = new double[10];

                for (int j = 0; j < neuronHidden; j++) {
                    for (int k = 0; k < neuronOutput; k++) {
                        // faktor kesalahan y_net
                        error_ynet[j] = error_y[k] * w[k][j];
                        // System.out.println("Error y_net = "+error_ynet[j]);
                    }
                    // faktor kesalahan z
                    error_z[j] = error_ynet[j] * z[j] * (1 - z[j]);
                    // System.out.println("Error z = "+error_z[j]);

                    for (int k = 0; k < neuronInput; k++) {
                        // Suku perubahan bobot hidden
                        Av[k][j] = lr * error_z[j] * x[i][k];
                        // System.out.println("Av["+k+"]["+j+"] = "+Av[k][j]);
                        // System.out.println(lr+" * "+error_z[j]+" * "+x[i][k]+" = "+Av[k][j]);
                    }
                    // Suku perubahan bobot bias
                    Avb[j] = lr * error_z[j];
                    // System.out.println("Avb["+j+"] = "+Avb[j]);
                    // System.out.println(lr+" * "+error_z[j]+" = "+Avb[j]);
                }

                // update bobot output
                for (int j = 0; j < neuronOutput; j++) {
                    for (int k = 0; k < neuronHidden; k++) {
                        // update z
                        w[j][k] = w[j][k] + Aw[j][k];
                        // System.out.println("Bobot output = "+Aw[j][k]+" = "+w[j][k]);
                        // System.out.println(w[j][k]+" + "+Aw[j][k]+" = "+w[j][k]);
                        if ((loop % iterasi) == 0 || (loop == (epoch - 1))) {
                            textAreaOutput.append("Bobot output["+j+"]["+k+"] = "+df.format(w[j][k])+"\n");
                        }
                        // helper.writeBobotOutput(w, neuron_output, neuron_hidden, "Biner");
                    }
                    // update bias
                    wb[j] = wb[j] + Awb[j];
                    // System.out.println("Bias Output = "+Awb[j]+" = "+wb[j]);
                    // System.out.println(wb[j]+" + "+Awb[j]+" = "+wb[j]);
                    if ((loop % iterasi) == 0 || (loop == (epoch - 1))) {
                        textAreaOutput.append("Bias Output["+j+"] = "+df.format(wb[j])+"\n---------------------------------------\n");
                    }
                    // helper.writeBiasOutput(wb, neuron_output, "Biner");
                }
                
                // update bobot hidden
                for (int j = 0; j < neuronHidden; j++) {
                    for (int k = 0; k < neuronInput; k++) {
                        // update z
                        v[j][k] = v[j][k] + Av[k][j];
                        // System.out.println("Bobot Hidden = "+Av[k][j]+" = "+v[k][j]);
                        // System.out.println(v[j][k]+" + "+Av[k][j]+" = "+v[j][k]);
                        if ((loop % iterasi) == 0 || (loop == (epoch - 1))) {
                            textAreaHidden.append("Bobot Hidden["+k+"]["+j+"] = "+df.format(v[k][j])+"\n");
                        }
                        // helper.writeBobotHidden(v, neuron_hidden, neuron_input, "Biner");
                    }
                    // update bias
                    vb[j] = vb[j] + Avb[j];
                    // System.out.println("Bias Hidden = "+Avb[j]+" = "+vb[j]);
                    // System.out.println("bias : "+vb[j]+" + "+Avb[j]+" = "+vb[j]);
                    if ((loop % iterasi) == 0 || (loop == (epoch - 1))) {
                        textAreaHidden.append("Bias Hidden["+j+"] = "+df.format(vb[j])+"\n----------------------------------------\n");
                    }
                    // helper.writeBiasHidden(vb, neuron_hidden, "Biner");
                }
            // Akhir for i
            }
        
        // System.out.println("MSE "+loop+" = "+mse);
        
        // Tampil perubahan bobot
        
        if ((loop % iterasi) == 0 || (loop == (epoch - 1))) {
            textAreaMse.append("MSE ["+loop+"] = "+df.format(mse)+"\n");
        }
        
        lastMse = mse;
        loop++;
        
        // for graph
        dataset.setValue(new Double(mse), "Values", new Integer(loop));
        
        } while (loop < epoch && batasError < lastMse);
        System.out.println();
        // System.out.println("Last MSE = "+last_mse);
        // System.out.println("Epoch = "+loop);
        labelIterasi.update(labelIterasi.getGraphics());
        labelIterasi.setText(""+loop);
        labelMse.setText(""+df.format(lastMse));
        
        JFreeChart chart = ChartFactory.createLineChart("Grafik MSE", "Tahun", "IPM", dataset);
        
        ChartFrame frame = new ChartFrame("Bar Chart", chart);
        frame.setVisible(true);
        frame.setSize(700,550);
        
        // save bobot output
        for (int j = 0; j < neuronOutput; j++) {
            for (int k = 0; k < neuronHidden; k++) {
                helper.writeBobotOutput(w, neuronOutput, neuronHidden, "Biner");
            }
            helper.writeBiasOutput(wb, neuronOutput, "Biner");
        }

        // save bobot hidden
        for (int j = 0; j < neuronHidden; j++) {
            for (int k = 0; k < neuronInput; k++) {
                helper.writeBobotHidden(v, neuronHidden, neuronInput, "Biner");
            }
            helper.writeBiasHidden(vb, neuronHidden, "Biner");
        }
        
        // save setting
        double data[] = new double[6];
        data[0] = neuronHidden;
        data[1] = nilaiMin;
        data[2] = nilaiMax;
        data[3] = lr;
        data[4] = epoch;
        data[5] = lastMse;
        
        helper.writeSetting(data, "Biner");
    }
    
    private void sigmoidBipolar() {
        // var data learning
        double x[][] = new double[50][50];
        double xNorm[][] = new double[50][50];
        double xTemp[][] = new double[50][50];
        double v[][] = new double[100][100];
        double vb[] = new double[100];
        double w[][] = new double[100][100];
        double wb[] = new double[100];
        double t[] = new double[50];
        
        // Test
        double vTest[][] = {{0.1,0.2,0.3,0.4,0.5},{0.6,0.5,0.4,0.3,0.2}};
        double vbTest[] = {0.6,0.1};
        double wTest[][] = {{0.1,0.2}};
        double wbTest[] = {0.3};
        
        // initialize
        int n = 0;
        int countRecords;
        
        // var data setting
        double lr = Double.parseDouble(textLearningRate.getText());
        int neuronHidden = Integer.parseInt(textHiddenLayer.getText());
        int neuronOutput = 1;
        int neuronInput = 5;
        int loop = 0;
        int epoch = Integer.parseInt(textEpoch.getText());
        double batasError = Double.parseDouble(textTargetError.getText());
        double lastMse;
        
        DecimalFormat df = new DecimalFormat("#.########");
        int iterasi = Integer.parseInt(textTampilIterasi.getText());
        Helper helper = new Helper();
        countRecords = helper.countRecords("Data Latih");
        int countAllRecords = helper.countRecords();
        
        // for minmax
        int count = 0;
        try {
            Statement stm = Connect.getConn().createStatement();
            ResultSet rsl = stm.executeQuery("select * from datas");
            
            while (rsl.next()) {
                xTemp[count][0] = rsl.getDouble("t5");
                xTemp[count][1] = rsl.getDouble("t4");
                xTemp[count][2] = rsl.getDouble("t3");
                xTemp[count][3] = rsl.getDouble("t2");
                xTemp[count][4] = rsl.getDouble("t1");
                xTemp[count][5] = rsl.getDouble("target");
                count++;
            }
        
            rsl.close();
            stm.close();
        } catch (SQLException e) {
            System.out.println("Gagal mengambil data\n"+e);
        }
        
        double nilaiMin = helper.nilaiMin(xTemp, countAllRecords);
        double nilaiMax = helper.nilaiMax(xTemp, countAllRecords);
        
        try {
            Statement stm = Connect.getConn().createStatement();
            ResultSet rsl = stm.executeQuery("select * from datas where kategori = 'Data Latih'");
            
            while (rsl.next()) {
                xNorm[n][0] = rsl.getDouble("t5");
                xNorm[n][1] = rsl.getDouble("t4");
                xNorm[n][2] = rsl.getDouble("t3");
                xNorm[n][3] = rsl.getDouble("t2");
                xNorm[n][4] = rsl.getDouble("t1");
                xNorm[n][5] = rsl.getDouble("target");
                n++;
            }
        
            rsl.close();
            stm.close();
        } catch (SQLException e) {
            System.out.println("Gagal mengambil data\n"+e);
        }
        
        for (int i = 0; i < countRecords; i++) {
            for (int j = 0; j < 6; j++) {
                x[i][j] =  x[i][j] = ((xNorm[i][j]-nilaiMin)*(1-(-1))/(nilaiMax-nilaiMin))-1;
                t[i] = x[i][5];
            }
        }
        
        // Bobot statis
        /*
        for (int j = 0; j < neuron_hidden; j++) {
            for (int k = 0; k < neuron_input; k++) {
                // System.out.println("Bobot = ["+j+"]["+k+"]"+vTest[j][k]);
                v[j][k] = vTest[j][k];
            }
            // System.out.println("Bias = ["+j+"]"+vbTest[j]);
            vb[j] = vbTest[j];
        }
        
        for (int j = 0; j < neuron_output; j++) {
            for (int k = 0; k < neuron_hidden; k++) {
                // System.out.println("Bobot = ["+j+"]["+k+"]"+wTest[j][k]);
                w[j][k] = wTest[j][k];
            }
            // System.out.println("Bias = ["+j+"]"+wbTest[j]);
            wb[j] = wbTest[j];
        }
        */
        // Random bobot
        
        for (int j = 0; j < neuronHidden; j++) {
            for (int k = 0; k < neuronInput; k++) {
                v[j][k] = ThreadLocalRandom.current().nextDouble(-1, 1);
                // System.out.println("Bobot = ["+j+"]["+k+"]"+v[j][k]);
            }
            vb[j] = ThreadLocalRandom.current().nextDouble(-1, 1);
            // System.out.println("Bias = ["+j+"]"+vb[j]);
        }
        
        for (int j = 0; j < neuronOutput; j++) {
            for (int k = 0; k < neuronHidden; k++) {
                w[j][k] = ThreadLocalRandom.current().nextDouble(-1, 1);
                // System.out.println("Bobot = ["+j+"]["+k+"]"+w[j][k]);
            }
            wb[j] = ThreadLocalRandom.current().nextDouble(-1, 1);
            // System.out.println("Bias = ["+j+"]"+wb[j]);
        }
        
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        
        do {
            double temp_mse[] = new double[50];
            double mse = 0;
            
            // view step by step
            textAreaMse.update(textAreaMse.getGraphics());
            textAreaHidden.update(textAreaHidden.getGraphics());
            textAreaOutput.update(textAreaOutput.getGraphics());
            
            for (int i = 0; i < countRecords; i++) {
                
                // Input layer
                double z[] = new double[10];
                for (int j = 0; j < neuronHidden; j++) {
                    double z_net[] = new double[10];
                    double temp = 0;
                    for (int k = 0; k < neuronInput; k++) {
                        temp = temp + (x[i][k] * v[j][k]);
                        // System.out.println(x[i][k]+" * "+v[j][k]);
                        // System.out.println(i+" "+k+" = "+x[i][k]);
                        // System.out.println("temp = "+temp);
                    }
                    // Hasil z_net + bias
                    z_net[j] = vb[j] + temp;
                    // System.out.println(vb[j]);
                    // System.out.println(temp);
                    // System.out.println("z_net["+j+"] = "+z_net[j]);

                    // Hasil z dengan aktivasi sigmoid bipolar
                    z[j] = (2/(1+(Math.exp(-z_net[j]))))-1;
                    if ((loop % iterasi) == 0 || (loop == (epoch - 1))) {
                        // textAreaZ.append("Nilai z["+j+"] = "+df.format(z[j])+"\n");
                    }
                    // System.out.println("z["+j+"] = "+z[j]);
                }
                if ((loop % iterasi) == 0) {
                    // textAreaZ.append("---------------------------------------\n");
                }

                // Output layer
                double y[] = new double[10];
                for (int j = 0; j < neuronOutput; j++) {
                    double y_net[] = new double[10];
                    double temp = 0;

                    for (int k = 0; k < neuronHidden; k++) {
                        temp = temp + (z[k] * w[j][k]);
                        // System.out.println(z[k]+" * "+w[j][k]);
                        // System.out.println(temp);
                    }
                    y_net[j] = wb[j] + temp;
                    // Hasil y dengan aktivasi sigmoid bipolar
                    y[j] = (2/(1+(Math.exp(-y_net[j]))))-1;
                    
                    // System.out.println(wb[j]);
                    // System.out.println(y_net[j]);
                    // System.out.println(y[j]);
                    if ((loop % iterasi) == 0 || (loop == (epoch - 1))) {
                        // textAreaY.append("Nilai y = "+df.format(y[j])+"\n");
                    }
                    temp_mse[i] = Math.pow((y[j]-t[i]), 2)/countRecords;
                }
                
                mse = mse + temp_mse[i];

                // Error y dan delta w
                double error_y[] = new double[10];
                double Aw[][] = new double[10][10];
                double Awb[] = new double[10];

                for (int j = 0; j < neuronOutput; j++) {
                    // Error y
                    error_y[j] = (t[i] - y[j]) * ((1 + y[j]) * (1 - y[j])/2);
                    // System.out.println("("+t[i]+" - "+y[j]+") ("+y[j]+") (1 - "+y[j]);
                    // System.out.println("Error output = "+error_y[j]);

                    for (int k = 0; k < neuronHidden; k++) {
                        // Delta bobot
                        Aw[j][k] = lr * error_y[j] * z[k];
                        // System.out.println("Aw["+j+"]["+k+"] = "+Aw[j][k]);
                    }
                    // Delta bobot bias
                    Awb[j] = lr * error_y[j];
                    // System.out.println("Awb["+j+"] = "+Awb[j]);
                }

                // Error y_net
                double error_ynet[] = new double[10];
                double error_z[] = new double[10];
                double Av[][] = new double[10][10];
                double Avb[] = new double[10];

                for (int j = 0; j < neuronHidden; j++) {
                    for (int k = 0; k < neuronOutput; k++) {
                        // faktor kesalahan y_net
                        error_ynet[j] = error_y[k] * w[k][j];
                        // System.out.println("Error y_net = "+error_ynet[j]);
                    }
                    // faktor kesalahan z
                    error_z[j] = error_ynet[j] * ((1 + y[j]) * (1 - y[j])/2);
                    // System.out.println("Error z = "+error_z[j]);

                    for (int k = 0; k < neuronInput; k++) {
                        // Suku perubahan bobot hidden
                        Av[k][j] = lr * error_z[j] * x[i][k];
                        // System.out.println("Av["+k+"]["+j+"] = "+Av[k][j]);
                        // System.out.println(lr+" * "+error_z[j]+" * "+x[i][k]+" = "+Av[k][j]);
                    }
                    // Suku perubahan bobot bias
                    Avb[j] = lr * error_z[j];
                    // System.out.println("Avb["+j+"] = "+Avb[j]);
                    // System.out.println(lr+" * "+error_z[j]+" = "+Avb[j]);
                }

                // update bobot output
                for (int j = 0; j < neuronOutput; j++) {
                    for (int k = 0; k < neuronHidden; k++) {
                        // update z
                        w[j][k] = w[j][k] + Aw[j][k];
                        // System.out.println("Bobot output = "+Aw[j][k]+" = "+w[j][k]);
                        // System.out.println(w[j][k]+" + "+Aw[j][k]+" = "+w[j][k]);
                        if ((loop % iterasi) == 0 || (loop == (epoch - 1))) {
                            textAreaOutput.append("Bobot output["+j+"]["+k+"] = "+df.format(w[j][k])+"\n");
                        }
                        // helper.writeBobotOutput(w, neuron_output, neuron_hidden, "Bipolar");
                    }
                    // update bias
                    wb[j] = wb[j] + Awb[j];
                    // System.out.println("Bias Output = "+Awb[j]+" = "+wb[j]);
                    // System.out.println(wb[j]+" + "+Awb[j]+" = "+wb[j]);
                    if ((loop % iterasi) == 0 || (loop == (epoch - 1))) {
                        textAreaOutput.append("Bias Output["+j+"] = "+df.format(wb[j])+"\n---------------------------------------\n");
                    }
                    // helper.writeBiasOutput(wb, neuron_output, "Bipolar");
                }
                
                // update bobot hidden
                for (int j = 0; j < neuronHidden; j++) {
                    for (int k = 0; k < neuronInput; k++) {
                        // update z
                        v[j][k] = v[j][k] + Av[k][j];
                        // System.out.println("Bobot Hidden = "+Av[k][j]+" = "+v[k][j]);
                        // System.out.println(v[j][k]+" + "+Av[k][j]+" = "+v[j][k]);
                        if ((loop % iterasi) == 0 || (loop == (epoch - 1))) {
                            textAreaHidden.append("Bobot Hidden["+k+"]["+j+"] = "+df.format(v[k][j])+"\n");
                        }
                        // helper.writeBobotHidden(v, neuron_hidden, neuron_input, "Bipolar");
                    }
                    // update bias
                    vb[j] = vb[j] + Avb[j];
                    // System.out.println("Bias Hidden = "+Avb[j]+" = "+vb[j]);
                    // System.out.println("bias : "+vb[j]+" + "+Avb[j]+" = "+vb[j]);
                    if ((loop % iterasi) == 0 || (loop == (epoch - 1))) {
                        textAreaHidden.append("Bias Hidden["+j+"] = "+df.format(vb[j])+"\n----------------------------------------\n");
                    }
                    // helper.writeBiasHidden(vb, neuron_hidden, "Bipolar");
                }
            // Akhir for i
            }
        
        // System.out.println("MSE "+loop+" = "+mse);
        
        // Tampil perubahan bobot
        
        if ((loop % iterasi) == 0 || (loop == (epoch - 1))) {
            textAreaMse.append("MSE ["+loop+"] = "+df.format(mse)+"\n");
        }
        
        lastMse = mse;
        loop++;
        
        // for graph
        dataset.setValue(new Double(mse), "Values", new Integer(loop));
        
        } while (loop < epoch && batasError < lastMse);
        System.out.println();
        // System.out.println("Last MSE = "+last_mse);
        // System.out.println("Epoch = "+loop);
        labelIterasi.update(labelIterasi.getGraphics());
        labelIterasi.setText(""+loop);
        labelMse.setText(""+df.format(lastMse));
        
        JFreeChart chart = ChartFactory.createLineChart("Grafik MSE", "Tahun", "IPM", dataset);
        
        ChartFrame frame = new ChartFrame("Bar Chart", chart);
        frame.setVisible(true);
        frame.setSize(700,550);
        
        // save bobot output
        for (int j = 0; j < neuronOutput; j++) {
            for (int k = 0; k < neuronHidden; k++) {
                helper.writeBobotOutput(w, neuronOutput, neuronHidden, "Bipolar");
            }
            helper.writeBiasOutput(wb, neuronOutput, "Bipolar");
        }

        // save bobot hidden
        for (int j = 0; j < neuronHidden; j++) {
            for (int k = 0; k < neuronInput; k++) {
                helper.writeBobotHidden(v, neuronHidden, neuronInput, "Bipolar");
            }
            helper.writeBiasHidden(vb, neuronHidden, "Bipolar");
        }
        
        // save setting
        double data[] = new double[6];
        data[0] = neuronHidden;
        data[1] = nilaiMin;
        data[2] = nilaiMax;
        data[3] = lr;
        data[4] = epoch;
        data[5] = lastMse;
        
        helper.writeSetting(data, "Bipolar");
    }
    
    private void resetData() {
        textAreaHidden.setText("");
        textAreaOutput.setText("");
        textAreaMse.setText("");
        // textHiddenLayer.setText("");
        // textEpoch.setText("");
        // textLearningRate.setText("");
        // textTargetError.setText("");
    }
    
    private void getLearningData() {
        tbData.getDataVector().removeAllElements();
        tbData.fireTableDataChanged();
        
        try {
            Statement stm = Connect.getConn().createStatement();
            ResultSet rsl = stm.executeQuery("select * from datas where kategori = 'Data Latih'");
            
            while (rsl.next()) {
                Object[] obj = new Object[8];
                
                obj[0] = rsl.getString("tahun");
                obj[1] = rsl.getString("t5");
                obj[2] = rsl.getString("t4");
                obj[3] = rsl.getString("t3");
                obj[4] = rsl.getString("t2");
                obj[5] = rsl.getString("t1");
                obj[6] = rsl.getString("target");
                
                tbData.addRow(obj);
            }
            
            rsl.close();
            stm.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(rootPane, "Gagal Menampilkan Data\n"+e.toString());
        }
    }
    
    private void getTransformationData() {
        tbData.getDataVector().removeAllElements();
        tbData.fireTableDataChanged();
        
        try {
            Statement stm = Connect.getConn().createStatement();
            ResultSet rsl = stm.executeQuery("select * from datas where kategori = 'Data Latih'");
            
            while (rsl.next()) {
                Object[] obj = new Object[8];
                
                obj[0] = rsl.getString("tahun");
                obj[1] = rsl.getString("t5");
                obj[2] = rsl.getString("t4");
                obj[3] = rsl.getString("t3");
                obj[4] = rsl.getString("t2");
                obj[5] = rsl.getString("t1");
                obj[6] = rsl.getString("target");
                
                tbData.addRow(obj);
            }
            
            rsl.close();
            stm.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(rootPane, "Gagal Menampilkan Data\n"+e.toString());
        }
    }
    
    private void saveBobot() {
        String selectedAktivasi = (String) comboAktivasi.getSelectedItem();
        String aktivasi = "";
        
        if ("Sigmoid Biner".equals(selectedAktivasi)) {
            aktivasi = "Biner";
        } else if ("Sigmoid Bipolar".equals(selectedAktivasi)) {
            aktivasi = "Bipolar";
        }
        
        int neuronInput = 5;
        int neuronOutput = 1;
        DecimalFormat df = new DecimalFormat("#.########");
        DecimalFormat dfone = new DecimalFormat("#");
        Helper helper = new Helper();
        double setting[] = helper.readSetting(aktivasi);
        double neuronHidden = setting[0];
        double bobotHidden[][] = helper.readBobotHidden(neuronHidden, neuronInput, aktivasi);
        double bobotOutput[][] = helper.readBobotOutput(neuronOutput, neuronHidden, aktivasi);
        double biasHidden[] = helper.readBiasHidden(aktivasi);
        double biasOutput[] = helper.readBiasOutput(aktivasi);       
        
        int id = helper.autoNumber() + 1;
        
        try {
            Statement stm;
            stm = Connect.getConn().createStatement();
            // stm.executeUpdate("select id form learnings");
            stm.executeUpdate("insert into learnings values('"+
                    id+"','5-"+dfone.format(setting[0])+"-1','"+setting[3]+"','"+setting[4]+"','"+df.format(setting[5])+"','0','0','"+aktivasi+"')");
            stm.close();
            JOptionPane.showMessageDialog(rootPane, "Bobot pelatihan berhasil disimpan");
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(rootPane, "Data Gagal Disimpan\n"+e.toString());
        }
        
        // save bobot output
        for (int j = 0; j < neuronOutput; j++) {
            for (int k = 0; k < neuronHidden; k++) {
                helper.saveBobotOutput(bobotOutput, neuronOutput, neuronHidden, aktivasi, id);
            }
            helper.saveBiasOutput(biasOutput, neuronOutput, aktivasi, id);
        }

        // save bobot hidden
        for (int j = 0; j < neuronHidden; j++) {
            for (int k = 0; k < neuronInput; k++) {
                helper.saveBobotHidden(bobotHidden, neuronHidden, neuronInput, aktivasi, id);
            }
            helper.saveBiasHidden(biasHidden, neuronHidden, aktivasi, id);
        }
        
        // save setting
        for (int i = 0; i < 6; i++) {
            helper.saveSetting(setting, aktivasi, id);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Learning.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Learning.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Learning.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Learning.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Learning().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonLatih;
    private javax.swing.JButton buttonReset;
    private javax.swing.JComboBox<String> comboAktivasi;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel labelIterasi;
    private javax.swing.JLabel labelMse;
    private javax.swing.JTable tableData;
    private javax.swing.JTextArea textAreaHidden;
    private javax.swing.JTextArea textAreaMse;
    private javax.swing.JTextArea textAreaOutput;
    private javax.swing.JTextField textEpoch;
    private javax.swing.JTextField textHiddenLayer;
    private javax.swing.JTextField textLearningRate;
    private javax.swing.JTextField textTampilIterasi;
    private javax.swing.JTextField textTargetError;
    // End of variables declaration//GEN-END:variables
}
